" .vimrc
" Author: Matt Gerst <matt@mattgerst.me>
" Source: http://github.com/mgerst/dotfiles/vim

" Preamble ------------------------------------------ {{{
filetype off
filetype plugin indent on
set nocompatible
" --------------------------------------------------- }}}
" Vim-Plug ------------------------------------------ {{{
call plug#begin('~/.vim/plugged')

Plug 'scrooloose/nerdtree'
Plug 'mtth/scratch.vim'
Plug 'majutsushi/tagbar'
Plug 'tpope/vim-fugitive'
Plug 'airblade/vim-gitgutter'
Plug 'wincent/command-t'
Plug 'Lokaltog/vim-easymotion'
Plug 'nathanaelkane/vim-indent-guides'
Plug 'bling/vim-airline'

" Tests/Task Runners {{{
Plug 'tpope/vim-dispatch'
Plug 'janko-m/vim-test'
" }}}

" Autocomplete/Syntax {{{
Plug 'valloric/YouCompleteMe'
Plug 'rdnetto/YCM-Generator', { 'branch': 'stable' }
Plug 'scrooloose/syntastic'
" }}}

" Formatting {{{
Plug 'editorconfig/editorconfig-vim'
" }}}

" ColorSchemes {{{
Plug 'sickill/vim-monokai'
Plug 'tomasr/molokai'
" }}}

" Filetype plugins {{{
Plug 'fatih/vim-go'
Plug 'plasticboy/vim-markdown' | Plug 'godlygeek/tabular'

Plug 'mhinz/vim-rfc'
Plug 'vim-scripts/rfc-syntax'

Plug 'saltstack/salt-vim'

Plug 'rust-lang/rust.vim'

Plug 'leafgarland/typescript-vim'
" }}}

call plug#end()
" --------------------------------------------------- }}}
" Basic options ------------------------------------- {{{

set encoding=utf-8
set autoindent
set showmode
set showcmd
set hidden
set visualbell
set ttyfast
set ruler
set backspace=indent,eol,start
set number
set norelativenumber
set laststatus=2
set history=1000
set undofile
set undoreload=10000
set list
set listchars=tab:▸\ ,eol:¬,extends:❯,precedes:❮
set lazyredraw
set matchtime=3
set showbreak=↪
set autowrite
set autoread
set shiftround
set title
set linebreak
set colorcolumn=+1

" Spelling {{{
" zG remapped to add to local dit.
set dictionary=/usr/share/dict/words
set spellfile=~/.vim/custom-dictionary.utf-8.add/,~/.vim-local-dictionary.utf-8.add
nnoremap zG 2zg
" }}}

set fillchars=diff:⣿,vert:│

" Don't try to highlight lines longer than 800 characters.
set synmaxcol=800

" Time out on key codes but no mappings.
" Basically this makes terminal vim work sanely.
set notimeout
set ttimeout
set ttimeoutlen=10

" save when losing focus
au FocusLost * :silent! wall

" Resize splits when the window is resized
au VimResized * :wincmd =

" Ignore object files with wildcards, command-t respects this setting
set wildignore+=*.o,*.pyc,__pycache__,"bower_components/**/*","node_modules/**/*"
" Leader {{{
let mapleader=","
let maplocalleader="\\"
" }}}
" Cursor line {{{
" only show cursorline in the current window and in normal mode.

augroup cline
    au!
    au WinLeave,InsertEnter * set nocursorline
    au WinEnter,InsertLeave * set cursorline
augroup END

" }}}
" Line Return {{{

" Make sure vim returns to the same line when you reopen a file.
augroup line_return
    au!
    au BufReadPost *
        \ if line("'\"") > 0 && line("'\"") <= line("$") |
        \     execute 'normal! g`"zvzz' |
        \ endif
augroup END

" }}}
" Tabs, spaces, wrapping {{{

set tabstop=8
set shiftwidth=4
set softtabstop=4
set expandtab
set wrap
set textwidth=120
set formatoptions=qrnlj

" }}}
" Backups {{{

set backup
set noswapfile

set undodir=~/.vim/tmp/undo//
set backupdir=~/.vim/tmp/backup//
set directory=~/.vim/tmp/swap//

" Make those folders automatically if they don't already exist.
if !isdirectory(expand(&undodir))
    call mkdir(expand(&undodir), "p")
endif
if !isdirectory(expand(&backupdir))
    call mkdir(expand(&backupdir), "p")
endif
if !isdirectory(expand(&directory))
    call mkdir(expand(&directory), "p")
endif

" }}}
" Color scheme {{{

syntax on
colorscheme monokai
colorscheme molokai

" Highlight vcs conflict markers
match ErrorMsg '^\(<\|=\|>\)\{7\}}\([^=].\+\)\?$'

" }}}

" --------------------------------------------------- }}}
" Convenience mappings ------------------------------ {{{

" Toggle line numbers
nnoremap <leader>n :setlocal number!<cr>

" Tabs
nnoremap <leader>( :tabprev<cr>
nnoremap <leader>) :tabnext<cr>

" Buffers
nnoremap <leader>< :bprev<cr>
nnoremap <leader>> :bnext<cr>

" uppercase word
inoremap <c-u> <esc>mzgUiw`za

" Sudo to write
cnoremap w!! w !sudo tee % > /dev/null

" Toggle [i]nvisible characters
nnoremap <leader>i :set list!<cr>

" Zip Right
nnoremap zl :let @z=@"<cr>x$p:let @"=@z<cr>

" --------------------------------------------------- }}}
" Searching and movement ---------------------------- {{{

" Use sane regexes.
nnoremap / /\v
vnoremap / /\v

set ignorecase
set smartcase
set showmatch
set hlsearch
set gdefault

set scrolloff=3
set sidescroll=1
set sidescrolloff=10

set virtualedit+=block

nnoremap <silent> <leader><space> :noh<cr>:call clearmatches()<cr>

map <tab> %

" Keep search matches in the middle of the window.
nnoremap n nzzzv
nnoremap N Nzzzv

" Easier to type
noremap H ^
noremap L $
vnoremap L g_

" Easy buffer navigation
nnoremap <c-h> <c-w>h
nnoremap <c-j> <c-w>j
nnoremap <c-k> <c-w>k
nnoremap <c-l> <c-w>l

nnoremap <leader>v <c-w>v

" --------------------------------------------------- }}}
" Folding ------------------------------------------- {{{

set foldlevelstart=5

" Space to toggle folds.
nnoremap <space> za
vnoremap <space> za

" Make z0 recursively open whatever fold we're in, event if it's partially open
nnoremap z0 zcz0

function! MyFoldText() " {{{
    let line = getline(v:foldstart)

    let nucolwidth = &fdc + &number * &numberwidth
    let windowwidth = winwidth(0) - nucolwidth - 3
    let foldedlinecount = v:foldend - v:foldstart

    " expand tabs into spaces
    let onetab = strpart('          ', 0, &tabstop)
    let line = substitue(line, '\t', onetab, 'g')

    let line = strpart(line, 0, windowwidth - 2 -len(foldedlinecount))
    let fillcharcount = windowwidth - len(line) - len(foldedlinecount)
    return line . '…' . repeat(" ",fillcharcount) . foldedlinecount . '…' . ' '
endfunction " }}}
set foldtext=MyFoldText()
" --------------------------------------------------- }}}
" Quickfix ------------------------------------------ {{{

" These are useful for projects involving makefiles or other
" build systems that use Quickfix
nnoremap <F9> <esc>:make<cr>
nnoremap <leader>s <esc>:copen<cr>
nnoremap <leader>x <esc>:cclose<cr>
nnoremap <leader>c <esc>:cnext<cr>
nnoremap <leader>d <esc>:cprev<cr>

" --------------------------------------------------- }}}
" Filetype-specific --------------------------------- {{{

" Assembly {{{
augroup ft_asm
    au!
    au FileType asm setlocal noexpandtab shiftwidth=8 tabstop=8 softtabstop=8
augroup END
" }}}
" C {{{
augroup ft_c
    au!
    au FileType c setlocal foldmethod=marker foldmarker={,}

    " Generate header guards
    au FileType c nmap <localleader>h I#ifndef <ESC>yyPP2gglcwdefine<ESC>jHlcwendif //<ESC>2O<esc>
" }}}
" C++ {{{
augroup ft_cpp
    au!
    au FileType cpp setlocal foldmethod=marker foldmarker={,}

    " Generate header guards
    au FileType cpp nmap <localleader>h I#ifndef <ESC>yyPP2gglcwdefine<ESC>jHlcwendif //<ESC>2O<esc>
augroup END
" }}}
" CSS and LessCSS {{{
augroup ft_css
    au!

    au BufNewFile,BufRead *.less setlocal filetype=less

    au FileType less,css setlocal foldmethod=marker
    au FileType less,css setlocal foldmarker={,}
    au FileType less,css setlocal omnifunc=csscomplete#CompleteCSS
    au FileType less,css setlocal iskeyword+=-

    " Use <leader>S to sort properties
    au BufNewFile,BufRead *.less,*.css nnoremap <buffer> <localleader>S ?{<CR>jV/\v^\s*\}?$<CR>k:sort<cr>:noh</cr>
augroup END
" }}}
" Go {{{
augroup ft_go
    au!

    au BufNewFile,BufRead *.go setlocal filetype=go

    au FileType go setlocal noexpandtab
    au FileType go setlocal nolist
    au FileType go setlocal tabstop=4
    au FileType go setlocal shiftwidth=4

    au FileType go setlocal foldmethod=marker foldmarker={,}
augroup END
" }}}
" HTML, Django, Jinja {{{

let g:html_indent_tags = ['p', 'li']

augroup ft_html
    au!

    au BufNewFile,BufRead *.html setlocal filetype=htmldjango
    au BufNewFile,BufRead *.dram setlocal filetype=htmldjango

    au FileType html,jinja,htmldjango setlocal foldmethod=manual
augroup END
" }}}
" Javascript {{{
augroup ft_javascript
    au!

    au FileType javascript setlocal foldmethod=marker
    au FileType javascript setlocal foldmarker={,}
augroup END
" }}}
" Markdown {{{
augroup ft_markdown
    au!

    au BufNewFile,BufRead *.m*d* setlocal filetype=markdown foldlevel=1

    " Use <localleader>1/2/3 to add headings
    au FileType markdown nnoremap <buffer> <localleader>1 yypVr=:redraw<cr>
    au FileType markdown nnoremap <buffer> <localleader>2 yypVr-:redraw<cr>
    au FileType markdown nnoremap <buffer> <localleader>3 mzI###<space><esc>`zllll
    au FileType markdown nnoremap <buffer> <localleader>4 mzI####<space><esc>`zlllll
augroup END

let g:markdown_fenced_languages = ['css', 'erb=eruby', 'javascript',
    \'js=javascript', 'c', 'cpp', 'python', 'ruby', 'asm', 'sass', 'xml', 'html']
" }}}
" Nginx {{{
augroup ft_nginx
    au!

    au BufRead,BufNewFile /etc/nginx/conf/* set ft=nginx
    au BufRead,BufNewFile /etc/nginx/sites-available/* set ft=nginx

    au FileType nginx setlocal foldmethod=marker foldmarker={,}
augroup END
" }}}
" Python {{{
augroup ft_python
    au!

    au FileType python setlocal define=^\s*\\(def\\\\|class\\)
    au FileType python setlocal foldmethod=indent
    au FileType man nnoremap <buffer> <cr> :q<cr>
augroup END
" }}}
" ReStructuredText {{{
augroup ft_rst
    au!

    au FileType rst nnoremap <buffer> <localleader>1 yypVr=:redraw<cr>
    au FileType rst nnoremap <buffer> <localleader>2 yypVr-:redraw<cr>
    au FileType rst nnoremap <buffer> <localleader>3 yypVr~:redraw<cr>
    au FileType rst nnoremap <buffer> <localleader>4 yypVr`:redraw<cr>
augroup END
" }}}
" Ruby {{{
augroup ft_ruby
    au!

    au FileType ruby setlocal foldmethod=syntax
    au BufRead,BufNewFile capfile setlocal filetype=ruby
augroup END
" }}}
" Vagrant {{{
augroup ft_vagrant
    au!
    au BufRead,BufNewFile Vagrantfile set ft=ruby
augroup END
" }}}
" Vim {{{
augroup ft_vim
    au!

    au FileType vim setlocal foldlevelstart=0
    au FileType vim setlocal foldmethod=marker
    au FileType help setlocal textwidth=78
    au BufWinEnter *.txt if &ft == 'help' | wincmd L | endif

    au BufWritePost $MYVIMRC source %
augroup END
" }}}
" YAML {{{
augroup ft_yaml
    au!

    au FileType yaml set shiftwidth=2
augroup END
" }}}

" }}}
" Plugin settings ----------------------------------- {{{
" Airline {{{
let g:airline#extensions#tabline#enabled = 1

let g:airline_left_sep = ''
let g:airline_right_sep = ''
" }}}
" Command-T {{{

nnoremap <leader>o <esc>:CommandT<cr>
nnoremap <leader>O <esc>:CommandTFlush<cr>
nnoremap <leader>m <esc>:CommandTBuffer<cr>

" command-T in right vertical split
nnoremap <leader>vo <esc>:vs<cr><c-w>l:CommandT<cr>
" Command-T in bottom horizontal split
nnoremap <leader>so <esc>:sp<cr><c-w>j:CommandT<cr>

" Command-T Buffer in right vertical split
nnoremap <leader>vm <esc>:vs<cr><c-w>l:CommandTBuffer<cr>
" Command-T Buffer in bottom horizontal split
nnoremap <leader>sm <esc>:sp<cr><c-w>j:CommandTBuffer<cr>

" }}}
" NERD Tree {{{

noremap <F2> :NERDTreeToggle<cr>
inoremap <F2> <esc>:NERDTreeToggle<cr>

augroup ps_nerdtree
    au!

    au FileType nerdtree setlocal nolist
    au FileType nerdtree nnoremap <buffer> H :vertical resize -10<cr>
    au FileType nerdtree nnoremap <buffer> L :vertical resize +10<cr>
augroup END

let NERDTreeHighlightCursorline = 1
let NERDTreeIgnore = ['.vim$', '\~$', '.*\.pyc$', 'pip-log\.txt$']
let NERDTreeMinimalUI = 1
let NERDTreeDirArrows = 1
let NERDChristmasTree = 1
let NERDTreeChDirMode = 2
let NERDTreeMapJumpFirstChild = 'gk'

" }}}
" Scratch {{{

command! ScratchToggle call ScratchToggle()

function! ScratchToggle()
    if exists("w:is_scratch_window")
        unlet w:is_scratch_window
        exec "q"
    else
        exec "normal! :Scratch\<cr>\<C-w>L"
        let w:is_scratch_window = 1
    endif
endfunction

nnoremap <silent> <leader><tab> :ScratchToggle<cr>

" }}}
" Tagbar {{{

let g:tagbar_usearrows = 1
nnoremap <leader>l :TagbarToggle<cr>

" }}}
" Test {{{
nmap <silent> <leader>t :TestNearest<CR>
nmap <silent> <leader>T :TestFile<CR>
nmap <silent> <leader>a :TestSuite<CR>

let test#strategy = 'dispatch'
let test#python#runner = 'pytest'
" }}}
" EasyMotion {{{

" Replace search
map  / <Plug>(easymotion-sn)
omap / <Plug>(easymotion-tn)
map  n <Plug>(easymotion-next)
map  N <Plug>(easymotion-prev)

map <leader>j <Plug>(easymotion-j)
map <leader>k <Plug>(easymotion-k)

let g:EasyMotion_startofline = 0

" }}}
" Markdown {{{

let g:vim_markdown_math=1
let g:vim_markdown_frontmatter=1
let g:markdown_fenced_languages = ['cpp', 'c']

" }}}
" vim-go {{{
augroup go
    au!
    au FileType go nmap <localleader>f <Plug>(go-fmt)
    au FileType go nmap <localleader>r <Plug>(go-run)
    au FileType go nmap <localleader>b <Plug>(go-build)
    au FileType go nmap <localleader>t <Plug>(go-test)
    au FileType go nmap <localleader>c <Plug>(go-coverage)

    au FileType go nmap <localleader>ds <Plug>(go-def-split)
    au FileType go nmap <localleader>dv <Plug>(go-def-vertical)
    au FileType go nmap <localleader>dt <Plug>(go-def-tab)

    au FileType go nmap <localleader>gd <Plug>(go-doc)
    au FileType go nmap <localleader>gv <Plug>(go-doc-vertical)
augroup END

let g:go_highlight_functions = 1
let g:go_highlight_methods = 1
let g:go_highlight_structs = 1
let g:go_highlight_operators = 1
let g:go_highlight_build_constraints = 1

let g:go_fmt_command = "goimports"
" }}}
" Syntastic {{{
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 0
let g:syntastic_check_on_wq = 0

" Use Python3 interpreter to check python files
"let g:syntastic_python_python_exec = '/usr/bin/python3'
" }}}
" Vim-indent-guides {{{

set et
let g:indent_guides_start_level = 2
let g:indent_guides_guide_size = 1

set background=dark
hi IndentGuidesOdd  ctermbg=black
hi IndentGuidesEven ctermbg=darkgrey
" }}}
" --------------------------------------------------- }}}
" Environments (GUI/Console) ------------------------ {{{

if has('gui_running')
    " GUI vim 
    
    set guifont=Menlo\ Regular\ for\ Powerline:h12

    " Remove all the UI cruft
    set go-=T
    set go-=l
    set go-=L
    set go-=r
    set go-=R

    highlight SpellBad term=underline gui=undercurl guisp=Orange

    " Different cursors for different modes.
    set guicursor=n-c:block-Cursor-blinkon0
    set guicursor+=v:block-vCursor-blinkon0
    set guicursor+=i-ci:ver20-iCursor
else
    " Console vim
    
    " Mouse Support
    set mouse=a
endif
" --------------------------------------------------- }}}
